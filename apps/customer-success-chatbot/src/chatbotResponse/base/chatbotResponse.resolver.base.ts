/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ChatbotResponse } from "./ChatbotResponse";
import { ChatbotResponseCountArgs } from "./ChatbotResponseCountArgs";
import { ChatbotResponseFindManyArgs } from "./ChatbotResponseFindManyArgs";
import { ChatbotResponseFindUniqueArgs } from "./ChatbotResponseFindUniqueArgs";
import { CreateChatbotResponseArgs } from "./CreateChatbotResponseArgs";
import { UpdateChatbotResponseArgs } from "./UpdateChatbotResponseArgs";
import { DeleteChatbotResponseArgs } from "./DeleteChatbotResponseArgs";
import { ChatbotResponseService } from "../chatbotResponse.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ChatbotResponse)
export class ChatbotResponseResolverBase {
  constructor(
    protected readonly service: ChatbotResponseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ChatbotResponse",
    action: "read",
    possession: "any",
  })
  async _chatbotResponsesMeta(
    @graphql.Args() args: ChatbotResponseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ChatbotResponse])
  @nestAccessControl.UseRoles({
    resource: "ChatbotResponse",
    action: "read",
    possession: "any",
  })
  async chatbotResponses(
    @graphql.Args() args: ChatbotResponseFindManyArgs
  ): Promise<ChatbotResponse[]> {
    return this.service.chatbotResponses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ChatbotResponse, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ChatbotResponse",
    action: "read",
    possession: "own",
  })
  async chatbotResponse(
    @graphql.Args() args: ChatbotResponseFindUniqueArgs
  ): Promise<ChatbotResponse | null> {
    const result = await this.service.chatbotResponse(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ChatbotResponse)
  @nestAccessControl.UseRoles({
    resource: "ChatbotResponse",
    action: "create",
    possession: "any",
  })
  async createChatbotResponse(
    @graphql.Args() args: CreateChatbotResponseArgs
  ): Promise<ChatbotResponse> {
    return await this.service.createChatbotResponse({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ChatbotResponse)
  @nestAccessControl.UseRoles({
    resource: "ChatbotResponse",
    action: "update",
    possession: "any",
  })
  async updateChatbotResponse(
    @graphql.Args() args: UpdateChatbotResponseArgs
  ): Promise<ChatbotResponse | null> {
    try {
      return await this.service.updateChatbotResponse({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ChatbotResponse)
  @nestAccessControl.UseRoles({
    resource: "ChatbotResponse",
    action: "delete",
    possession: "any",
  })
  async deleteChatbotResponse(
    @graphql.Args() args: DeleteChatbotResponseArgs
  ): Promise<ChatbotResponse | null> {
    try {
      return await this.service.deleteChatbotResponse(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
