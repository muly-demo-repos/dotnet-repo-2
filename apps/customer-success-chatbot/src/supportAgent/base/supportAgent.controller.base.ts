/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SupportAgentService } from "../supportAgent.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SupportAgentCreateInput } from "./SupportAgentCreateInput";
import { SupportAgent } from "./SupportAgent";
import { SupportAgentFindManyArgs } from "./SupportAgentFindManyArgs";
import { SupportAgentWhereUniqueInput } from "./SupportAgentWhereUniqueInput";
import { SupportAgentUpdateInput } from "./SupportAgentUpdateInput";
import { SupportTicketFindManyArgs } from "../../supportTicket/base/SupportTicketFindManyArgs";
import { SupportTicket } from "../../supportTicket/base/SupportTicket";
import { SupportTicketWhereUniqueInput } from "../../supportTicket/base/SupportTicketWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SupportAgentControllerBase {
  constructor(
    protected readonly service: SupportAgentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SupportAgent })
  @nestAccessControl.UseRoles({
    resource: "SupportAgent",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSupportAgent(
    @common.Body() data: SupportAgentCreateInput
  ): Promise<SupportAgent> {
    return await this.service.createSupportAgent({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SupportAgent] })
  @ApiNestedQuery(SupportAgentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SupportAgent",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async supportAgents(@common.Req() request: Request): Promise<SupportAgent[]> {
    const args = plainToClass(SupportAgentFindManyArgs, request.query);
    return this.service.supportAgents({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SupportAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SupportAgent",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async supportAgent(
    @common.Param() params: SupportAgentWhereUniqueInput
  ): Promise<SupportAgent | null> {
    const result = await this.service.supportAgent({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SupportAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SupportAgent",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSupportAgent(
    @common.Param() params: SupportAgentWhereUniqueInput,
    @common.Body() data: SupportAgentUpdateInput
  ): Promise<SupportAgent | null> {
    try {
      return await this.service.updateSupportAgent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SupportAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SupportAgent",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSupportAgent(
    @common.Param() params: SupportAgentWhereUniqueInput
  ): Promise<SupportAgent | null> {
    try {
      return await this.service.deleteSupportAgent({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/supportTickets")
  @ApiNestedQuery(SupportTicketFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SupportTicket",
    action: "read",
    possession: "any",
  })
  async findSupportTickets(
    @common.Req() request: Request,
    @common.Param() params: SupportAgentWhereUniqueInput
  ): Promise<SupportTicket[]> {
    const query = plainToClass(SupportTicketFindManyArgs, request.query);
    const results = await this.service.findSupportTickets(params.id, {
      ...query,
      select: {
        assignedAgent: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        description: true,
        id: true,
        status: true,

        supportAgent: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/supportTickets")
  @nestAccessControl.UseRoles({
    resource: "SupportAgent",
    action: "update",
    possession: "any",
  })
  async connectSupportTickets(
    @common.Param() params: SupportAgentWhereUniqueInput,
    @common.Body() body: SupportTicketWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      supportTickets: {
        connect: body,
      },
    };
    await this.service.updateSupportAgent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/supportTickets")
  @nestAccessControl.UseRoles({
    resource: "SupportAgent",
    action: "update",
    possession: "any",
  })
  async updateSupportTickets(
    @common.Param() params: SupportAgentWhereUniqueInput,
    @common.Body() body: SupportTicketWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      supportTickets: {
        set: body,
      },
    };
    await this.service.updateSupportAgent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/supportTickets")
  @nestAccessControl.UseRoles({
    resource: "SupportAgent",
    action: "update",
    possession: "any",
  })
  async disconnectSupportTickets(
    @common.Param() params: SupportAgentWhereUniqueInput,
    @common.Body() body: SupportTicketWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      supportTickets: {
        disconnect: body,
      },
    };
    await this.service.updateSupportAgent({
      where: params,
      data,
      select: { id: true },
    });
  }
}
